#!/usr/bin/env python3.6

from functions import *

import numpy as np

import argparse
import json
import sys

parserdescription = 'Arguments for k, training set, and test set'

parser = argparse.ArgumentParser(
                                 description=parserdescription
                                 )

parser.add_argument(
                    'kmax',
                    type=int,
                    help='maximum k parameter'
                    )

parser.add_argument(
                    'train',
                    type=str,
                    help='Path to training set'
                    )

parser.add_argument(
                    'validation',
                    type=str,
                    help='Path to validation set'
                    )

parser.add_argument(
                    'test',
                    type=str,
                    help='Path to test set'
                    )

args = parser.parse_args()


# Then number of k-nearest neighbors
kmax = args.kmax

# Open the training and test data
train = open(args.train)
validation = open(args.validation)
test = open(args.test)

# Load the data in opened files
train = json.load(train)
validation = json.load(validation)
test = json.load(test)

# The target feature is the lasat feature named 'label'
train_data, train_classes = datasplitter(train['data'])
validation_data, validation_classes = datasplitter(validation['data'])
test_data, test_classes = datasplitter(test['data'])

# Normalize the numeric features
train_norm, mean, std = trainnorm(train_data)
validation_norm = testnorm(validation_data, mean, std)
test_norm = testnorm(test_data, mean, std)

# The data types
train_types = [i[-1] for i in train['metadata']['features'][:-1]]
validation_types = [i[-1] for i in validation['metadata']['features'][:-1]]
test_types = [i[-1] for i in test['metadata']['features'][:-1]]

# The available class labels
labels = train['metadata']['features'][-1][-1]

# Hyperparameter search for kNN
accuracies = tune_knn(
                      train_norm,
                      train_classes,
                      validation_norm,
                      validation_classes,
                      kmax,
                      train_types,
                      labels
                      )

# The optimal k value
k = choose_k(accuracies)

merged_norm = np.concatenate((
                              np.array(train_norm),
                              np.array(validation_norm))
                             )

merged_classes = np.concatenate((
                                 np.array(train_classes),
                                 np.array(validation_classes))
                                )

# Use the k-nearest neighbors alorithm
results = knn(
              merged_norm,
              merged_classes,
              test_norm,
              k,
              train_types,
              labels
              )

predicted = np.array(results)[:, -1]
accuracy = prediction_accuracy(predicted, test_classes)

results = []
for key in accuracies:
    print(str(key)+','+str(accuracies[key]), file=sys.stdout)

# Print the data in standard output
print(k, file=sys.stdout)
print(accuracy, file=sys.stdout)
